{"version":3,"sources":["../src/opencast_to_paella_converter.js"],"names":["define","base","paella","_config","player","config","plugins","list","_orderTracks","orderTracks","filterStream","streams","some","curretStream","filter","system","currentFilter","userAgent","audioTag","track","sourceType","protocol","exec","url","mimetype","debug","log","split","res","video","Object","resolution","src","urlSplit","rtmp_server","rtmp_stream","server","encodeURIComponent","stream","source","isLiveStream","live","w","h","currentTrack","audioTagConfig","getAudioTagConfig","tags","tag","Array","startsWith","slice","entries","atc","sflavor","type","smask","dictionary","currentLanguage","episode","flavor","subFlavor","currentStream","sources","preview","content","tracks","mediapackage","media","attachments","attachment","forEach","getSourceTypeFromTrack","audio","getAudioTagFromTrack","push","getStreamSourceFromTrack","duration","parseInt","imageSource","frames","count","imageSourceHD","currentAttachment","test","ref","time","RegExp","$1","$2","$3","imagesArray","length","image","getFilterStream","flavors","importF","cFlavour","sflavour","importT","cTag","t","indexOf","i","splice","unshift","paellaStreams","getContentToImport","flavorStr","getStreamFromFlavor","captions","catalogs","metadata","catalog","captions_match","captions_format","captions_lang","captions_label","id","lang","text","format","err","currentCatalog","segments","opencastFrameList","thumb","keys","key","presenterPreview","presentationPreview","otherPreview","endsWith","getStreams","getCaptions","getSegments","data","title","getPreviewImage","frameList"],"mappings":"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","sourcesContent":["define(['mod_opencast/base'], function(base) {\n\n    /**\n     * Licensed to The Apereo Foundation under one or more contributor license\n     * agreements. See the NOTICE file distributed with this work for additional\n     * information regarding copyright ownership.\n     *\n     *\n     * The Apereo Foundation licenses this file to you under the Educational\n     * Community License, Version 2.0 (the \"License\"); you may not use this file\n     * except in compliance with the License. You may obtain a copy of the License\n     * at:\n     *\n     *   http://opensource.org/licenses/ecl2.txt\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n     * License for the specific language governing permissions and limitations under\n     * the License.\n     *\n     */\n    return class OpencastToPaellaConverter {\n\n        constructor(paella) {\n            this.paella = paella;\n            this._config = paella.player.config.plugins.list['es.upv.paella.opencast.loader'] || {};\n            this._orderTracks = this._config.orderTracks ||\n                ['presenter/delivery', 'presenter/preview', 'presentation/delivery', 'presentation/preview'];\n        }\n\n        getFilterStream() {\n            var filterStream;\n\n            var streams = this._config.streams || [];\n            streams.some(function (curretStream) {\n                return curretStream.filter.system.some(function (currentFilter) {\n                    if ((currentFilter == '*') || base.userAgent.system[currentFilter]) {\n                        filterStream = curretStream;\n                        return true;\n                    }\n                });\n            });\n\n            if (!filterStream) {\n                filterStream = {\n                    'filter': {\n                        'system': ['*']\n                    },\n                    'tracks': {\n                        'flavors': ['*/*'],\n                        'tags': ['*']\n                    }\n                };\n            }\n\n            return filterStream;\n        }\n\n        getAudioTagConfig() {\n            return this._config.audioTag || {'*/*': '*'};\n        }\n\n        getSourceTypeFromTrack(track) {\n            var sourceType = null;\n\n            var protocol = /^(.*):\\/\\/.*$/.exec(track.url);\n            if (protocol) {\n                switch (protocol[1]) {\n                    case 'rtmp':\n                    case 'rtmps':\n                        switch (track.mimetype) {\n                            case 'video/mp4':\n                            case 'video/ogg':\n                            case 'video/webm':\n                            case 'video/x-flv':\n                                sourceType = 'rtmp';\n                                break;\n                            default:\n                                this.paella.debug.log(`OpencastToPaellaConverter: MimeType (${track.mimetype}) not supported!`);\n                                break;\n                        }\n                        break;\n                    case 'http':\n                    case 'https':\n                        switch (track.mimetype) {\n                            case 'video/mp4':\n                            case 'video/ogg':\n                            case 'video/webm':\n                                sourceType = track.mimetype.split('/')[1];\n                                break;\n                            case 'video/x-flv':\n                                sourceType = 'flv';\n                                break;\n                            case 'application/x-mpegURL':\n                                sourceType = 'hls';\n                                break;\n                            case 'application/dash+xml':\n                                sourceType = 'mpd';\n                                break;\n                            case 'audio/m4a':\n                                sourceType = 'audio';\n                                break;\n                            default:\n                                this.paella.debug.log(`OpencastToPaellaConverter: MimeType (${track.mimetype}) not supported!`);\n                                break;\n                        }\n                        break;\n                    default:\n                        this.paella.debug.log(`OpencastToPaellaConverter: Protocol (${protocol[1]}) not supported!`);\n                        break;\n                }\n            }\n\n            return sourceType;\n        }\n\n        getStreamSourceFromTrack(track) {\n            var res = new Array(0, 0);\n            if (track.video instanceof Object) {\n                res = track.video.resolution.split('x');\n            }\n\n            var src = track.url;\n            var urlSplit = /^(rtmps?:\\/\\/[^/]*\\/[^/]*)\\/(.*)$/.exec(track.url);\n            if (urlSplit !== null) {\n                var rtmp_server = urlSplit[1];\n                var rtmp_stream = urlSplit[2];\n                src = {\n                    server: encodeURIComponent(rtmp_server),\n                    stream: encodeURIComponent(rtmp_stream)\n                };\n            }\n\n            var source = {\n                src: src,\n                isLiveStream: (track.live === true)\n            };\n\n            if (track.mimetype != 'audio/m4a') {\n                source.mimetype = track.mimetype;\n                source.res = {w: res[0], h: res[1]};\n            }\n\n            return source;\n        }\n\n        getAudioTagFromTrack(currentTrack) {\n            let audioTagConfig = this.getAudioTagConfig();\n            let audioTag;\n\n            let tags = [];\n            if ((currentTrack.tags) && (currentTrack.tags.tag)) {\n                tags = currentTrack.tags.tag;\n                if (!(tags instanceof Array)) {\n                    tags = [tags];\n                }\n            }\n            tags.some(function (tag) {\n                if (tag.startsWith('audioTag:')) {\n                    audioTag = tag.slice(9);\n                    return true;\n                }\n            });\n            if (!audioTag) {\n                Object.entries(audioTagConfig).some(function (atc) {\n                    let sflavor = currentTrack.type.split('/');\n                    let smask = atc[0].split('/');\n\n                    if (((smask[0] == '*') || (smask[0] == sflavor[0])) && ((smask[1] == '*') || (smask[1] == sflavor[1]))) {\n                        audioTag = (atc[1] == '*') ? base.dictionary.currentLanguage() : atc[1];\n                        return true;\n                    }\n                });\n            }\n\n            return audioTag;\n        }\n\n        /**\n         * Extract a stream identified by a given flavor from the media packages track list and try to find a corresponding\n         * image attachment for the selected track.\n         * @param episode   result structure from search service\n         * @param flavor    flavor used for track selection\n         * @param subFlavor subflavor used for track selection\n         */\n        getStreamFromFlavor(episode, flavor, subFlavor) {\n            var currentStream = {sources: {}, preview: '', content: flavor};\n\n            var tracks = episode.mediapackage.media.track;\n            var attachments = episode.mediapackage.attachments.attachment;\n            if (!(tracks instanceof Array)) {\n                tracks = tracks ? [tracks] : [];\n            }\n            if (!(attachments instanceof Array)) {\n                attachments = attachments ? [attachments] : [];\n            }\n\n            // Read the tracks!!\n            tracks.forEach((currentTrack) => {\n                if (currentTrack.type == flavor + '/' + subFlavor) {\n                    var sourceType = this.getSourceTypeFromTrack(currentTrack);\n                    if (sourceType) {\n                        if (!(currentStream.sources[sourceType]) || !(currentStream.sources[sourceType] instanceof Array)) {\n                            currentStream.sources[sourceType] = [];\n                        }\n                        if (currentTrack.audio) {\n                            currentStream.audioTag = this.getAudioTagFromTrack(currentTrack);\n                        }\n                        currentStream.sources[sourceType].push(this.getStreamSourceFromTrack(currentTrack));\n\n                        if (currentTrack.video) {\n                            currentStream.type = 'video';\n                        } else if (currentTrack.audio) {\n                            currentStream.type = 'audio';\n                        }\n                    }\n                }\n            });\n\n            // Read the attachments\n            var duration = parseInt(episode.mediapackage.duration / 1000);\n            var imageSource = {type: 'image/jpeg', frames: {}, count: 0, duration: duration, res: {w: 320, h: 180}};\n            var imageSourceHD = {type: 'image/jpeg', frames: {}, count: 0, duration: duration, res: {w: 1280, h: 720}};\n            attachments.forEach((currentAttachment) => {\n                if (currentAttachment.type == `${flavor}/player+preview`) {\n                    currentStream.preview = currentAttachment.url;\n                } else if (currentAttachment.type == `${flavor}/segment+preview+hires`) {\n                    if (/time=T(\\d+):(\\d+):(\\d+)/.test(currentAttachment.ref)) {\n                        time = parseInt(RegExp.$1) * 60 * 60 + parseInt(RegExp.$2) * 60 + parseInt(RegExp.$3);\n                        imageSourceHD.frames['frame_' + time] = currentAttachment.url;\n                        imageSourceHD.count = imageSourceHD.count + 1;\n                    }\n                } else if (currentAttachment.type == `${flavor}/segment+preview`) {\n                    if (/time=T(\\d+):(\\d+):(\\d+)/.test(currentAttachment.ref)) {\n                        var time = parseInt(RegExp.$1) * 60 * 60 + parseInt(RegExp.$2) * 60 + parseInt(RegExp.$3);\n                        imageSource.frames['frame_' + time] = currentAttachment.url;\n                        imageSource.count = imageSource.count + 1;\n                    }\n                }\n            });\n\n            var imagesArray = [];\n            if (imageSource.count > 0) {\n                imagesArray.push(imageSource);\n            }\n            if (imageSourceHD.count > 0) {\n                imagesArray.push(imageSourceHD);\n            }\n            if (imagesArray.length > 0) {\n                currentStream.sources.image = imagesArray;\n            }\n\n            return currentStream;\n        }\n\n        getContentToImport(episode) {\n            var filterStream = this.getFilterStream();\n\n            var flavors = [];\n            var tracks = episode.mediapackage.media.track;\n            if (!(tracks instanceof Array)) {\n                tracks = [tracks];\n            }\n\n            tracks.forEach((currentTrack) => {\n                let importF = filterStream.tracks.flavors.some(function (cFlavour) {\n                    let smask = cFlavour.split('/');\n                    let sflavour = currentTrack.type.split('/');\n\n                    return (((smask[0] == '*') || (smask[0] == sflavour[0])) &&\n                        ((smask[1] == '*') || (smask[1] == sflavour[1])));\n                });\n\n                let importT = false;\n                let tags = [];\n                if ((currentTrack.tags) && (currentTrack.tags.tag)) {\n                    tags = [currentTrack.tags.tag];\n                    if (!(currentTrack.tags.tag instanceof Array)) {\n                        tags = [currentTrack.tags.tag];\n                    }\n                }\n                importT = filterStream.tracks.tags.some(function (cTag) {\n                    return (cTag == '*') || tags.some(function (t) {\n                        return (cTag == t);\n                    });\n                });\n\n                if (importF || importT) {\n                    if (flavors.indexOf(currentTrack.type) < 0) {\n                        flavors.push(currentTrack.type);\n                    }\n                }\n            });\n\n            // Sort the streams\n            for (let i = this._orderTracks.length - 1; i >= 0; i--) {\n                let flavor = this._orderTracks[i];\n                if (flavors.indexOf(flavor) > 0) {\n                    flavors.splice(flavors.indexOf(flavor), 1);\n                    flavors.unshift(flavor);\n                }\n            }\n\n            return flavors;\n        }\n\n        getStreams(episode) {\n            // Get the streams\n            var paellaStreams = [];\n            var flavors = this.getContentToImport(episode);\n            flavors.forEach((flavorStr) => {\n                var [flavor, subFlavor] = flavorStr.split('/');\n                var stream = this.getStreamFromFlavor(episode, flavor, subFlavor);\n                paellaStreams.push(stream);\n            });\n            return paellaStreams;\n        }\n\n        getCaptions(episode) {\n            var captions = [];\n\n            var attachments = episode.mediapackage.attachments.attachment;\n            var catalogs = episode.mediapackage.metadata.catalog;\n            if (!(attachments instanceof Array)) {\n                attachments = attachments ? [attachments] : [];\n            }\n            if (!(catalogs instanceof Array)) {\n                catalogs = catalogs ? [catalogs] : [];\n            }\n\n\n            // Read the attachments\n            attachments.forEach((currentAttachment) => {\n                try {\n                    let captions_regex = /^captions\\/([^+]+)(\\+(.+))?/g;\n                    let captions_match = captions_regex.exec(currentAttachment.type);\n\n                    if (captions_match) {\n                        let captions_format = captions_match[1];\n                        let captions_lang = captions_match[3];\n\n                        // TODO: read the lang from the dfxp file\n                        // if (captions_format == \"dfxp\") {}\n\n                        if (!captions_lang && currentAttachment.tags && currentAttachment.tags.tag) {\n                            if (!(currentAttachment.tags.tag instanceof Array)) {\n                                currentAttachment.tags.tag = [currentAttachment.tags.tag];\n                            }\n                            currentAttachment.tags.tag.forEach((tag) => {\n                                if (tag.startsWith('lang:')) {\n                                    let split = tag.split(':');\n                                    captions_lang = split[1];\n                                }\n                            });\n                        }\n\n                        let captions_label = captions_lang || 'unknown language';\n                        // Base.dictionary.translate(\"CAPTIONS_\" + captions_lang);\n\n                        captions.push({\n                            id: currentAttachment.id,\n                            lang: captions_lang,\n                            text: captions_label,\n                            url: currentAttachment.url,\n                            format: captions_format\n                        });\n                    }\n                } catch (err) { /**/\n                }\n            });\n\n            // Read the catalogs\n            catalogs.forEach((currentCatalog) => {\n                try {\n                    // Backwards compatibility:\n                    // Catalogs flavored as 'captions/timedtext' are assumed to be dfxp\n                    if (currentCatalog.type == 'captions/timedtext') {\n                        let captions_lang;\n\n                        if (currentCatalog.tags && currentCatalog.tags.tag) {\n                            if (!(currentCatalog.tags.tag instanceof Array)) {\n                                currentCatalog.tags.tag = [currentCatalog.tags.tag];\n                            }\n                            currentCatalog.tags.tag.forEach((tag) => {\n                                if (tag.startsWith('lang:')) {\n                                    let split = tag.split(':');\n                                    captions_lang = split[1];\n                                }\n                            });\n                        }\n\n                        let captions_label = captions_lang || 'unknown language';\n                        captions.push({\n                            id: currentCatalog.id,\n                            lang: captions_lang,\n                            text: captions_label,\n                            url: currentCatalog.url,\n                            format: 'dfxp'\n                        });\n                    }\n                } catch (err) { /**/\n                }\n            });\n\n            return captions;\n        }\n\n        getSegments(episode) {\n            var segments = [];\n\n            var attachments = episode.mediapackage.attachments.attachment;\n            if (!(attachments instanceof Array)) {\n                attachments = attachments ? [attachments] : [];\n            }\n\n            // Read the attachments\n            var opencastFrameList = {};\n            attachments.forEach((currentAttachment) => {\n                try {\n                    if (currentAttachment.type == 'presentation/segment+preview+hires') {\n                        if (/time=T(\\d+):(\\d+):(\\d+)/.test(currentAttachment.ref)) {\n                            time = parseInt(RegExp.$1) * 60 * 60 + parseInt(RegExp.$2) * 60 + parseInt(RegExp.$3);\n\n                            if (!(opencastFrameList[time])) {\n                                opencastFrameList[time] = {\n                                    id: 'frame_' + time,\n                                    mimetype: currentAttachment.mimetype,\n                                    time: time,\n                                    url: currentAttachment.url,\n                                    thumb: currentAttachment.url\n                                };\n                            }\n                            opencastFrameList[time].url = currentAttachment.url;\n                        }\n                    } else if (currentAttachment.type == 'presentation/segment+preview') {\n                        if (/time=T(\\d+):(\\d+):(\\d+)/.test(currentAttachment.ref)) {\n                            var time = parseInt(RegExp.$1) * 60 * 60 + parseInt(RegExp.$2) * 60 + parseInt(RegExp.$3);\n                            if (!(opencastFrameList[time])) {\n                                opencastFrameList[time] = {\n                                    id: 'frame_' + time,\n                                    mimetype: currentAttachment.mimetype,\n                                    time: time,\n                                    url: currentAttachment.url,\n                                    thumb: currentAttachment.url\n                                };\n                            }\n                            opencastFrameList[time].thumb = currentAttachment.url;\n                        }\n                    }\n                } catch (err) { /**/\n                }\n            });\n\n            Object.keys(opencastFrameList).forEach((key) => {\n                segments.push(opencastFrameList[key]);\n            });\n            return segments;\n        }\n\n        getPreviewImage(episode) {\n            let presenterPreview;\n            let presentationPreview;\n            let otherPreview;\n\n            var attachments = episode.mediapackage.attachments.attachment;\n            if (!(attachments instanceof Array)) {\n                attachments = attachments ? [attachments] : [];\n            }\n            attachments.forEach((currentAttachment) => {\n                if (currentAttachment.type == 'presenter/player+preview') {\n                    presenterPreview = currentAttachment.url;\n                }\n                if (currentAttachment.type == 'presentation/player+preview') {\n                    presentationPreview = currentAttachment.url;\n                }\n                if (currentAttachment.type.endsWith('/player+preview')) {\n                    otherPreview = currentAttachment.url;\n                }\n            });\n\n            return presentationPreview || presenterPreview || otherPreview;\n        }\n\n        convertToDataJson(episode) {\n            var streams = this.getStreams(episode);\n            var captions = this.getCaptions(episode);\n            var segments = this.getSegments(episode);\n\n            var data = {\n                metadata: {\n                    title: episode.mediapackage.title,\n                    duration: episode.mediapackage.duration / 1000,\n                    preview: this.getPreviewImage(episode)\n                },\n                streams: streams,\n                frameList: segments,\n                captions: captions\n            };\n\n            return data;\n        }\n    };\n});\n"],"file":"opencast_to_paella_converter.min.js"}